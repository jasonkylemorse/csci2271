Part AThis program will read in a number of chars that the user inputs and store them in a 
char array. This is done by using malloc to allocate space for one character and then 
using realloc to add additional space. Once all of the input is stored, the program 
will read from where it is located in memory and move between states using the FSM 
logic. If the pattern is found, pointer arithmetic is used to determine the index of 
its starting point. Additionally, the printString method will print out everything after
the pattern until a ‘\0’ is found.
Part B and CThis program is a modified version of the one in Part A. The FSM logic now causes the 
state to stay the same, rather than returning to START. In this way, the accept state 
can still be reached, even if there are other characters between G, C, A, and G. The 
number of characters between them is determined by simply incrementing a counter whenever 
you don’t move to the next state.
Part DThis program is a modified version of the one in Part A. However, the only thing we print
out this time is the number of times the pattern occurs. This is achieved by incrementing
a counter every time the full pattern is read in. This counter is printed when the while
loop breaks.