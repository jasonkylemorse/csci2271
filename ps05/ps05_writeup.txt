I started this assignment by using my code from last week’s assignment to
make the linked list structure. All I needed to add was a function to print
temperature structures (their ID and a randomly generated digit between 
positive and negative 100 to represent the temperature).
The user dictates how many temperature sensors they want there to be, and I 
made separate threads for each of these. In order to have the temperature 
sensors generate a random value on each execution, I had the temperature struct
contain a seed. I used this seed in conjunction with rand() to generate an 
actual value.
The thread creation calls insertTemp, which is the function where I actually 
insert the struct into the linked list. However, in order to protect the list 
and ensure that multiple threads weren’t modifying it simultaneously, I locked,
inserted, waited until all other threads took their turns, broadcasted, and 
then unlocked. This ensured that each thread had its turn for exclusive access
to the shared information.
The only known issue is that in the first of the 10 cycles, some randomly 
generated temperatures are the same. This bug may have to do with the amount 
of time the thread spends sleeping—but I haven’t found a fix. Otherwise, the 
program appears to be working fine.