Part AI began implementing the double linked list by creating two structs: one to 
represent nodes in the list, and another to represent the entire list of connected 
items. The node struct contains a void pointer to whatever data it holds, as well 
as pointers to the nodes that come immediately before and after it. The list struct
contains pointers to the first and last nodes in the list.
My functions for creating a list and creating a node simply allocated space for 
these structures and initialized values to NULL. Inserting a node at the end of 
the list involved linking the current last node to the new node, and then setting 
the last node to the new node. Traversal (both forward and backward) simply involved
setting a temporary node to the first or last item in the list, and then setting 
temp to temp’s prev or next value. This function takes in a pointer to a function, 
and the function that it points to will describe how the contents of the nodes 
will be printed. For example, the user must specify that they are working with 
strings, ints, stocks, etc. The get item function traverses the list until it finds
the specified index, and then returned the contents at that node. Delete was the
most complicated function. It mostly involved just reassigning prev and next 
values for the nodes surrounding the deleted node, but I had to take into 
consideration whether the node was at the start, end, or middle of the list; 
otherwise there was much opportunity for a segmentation fault. Everything seems 
to be working properly and the list can hold any data type.

Part BIn this part, I read in the file of stock information line by line. Then I parsed 
each value out as an array of chars. For values that needed to be changed from 
strings to floats/ints, I used functions strtof() and atoll(). One minor issue is
that these functions don’t convert the value exactly. For instance, a string “17.5” 
might be converted to a float 17.4444449. I’m not sure why these functions change 
these values in such a way, but the error seemed more or less negligible.
Once I parsed these values out and converted them to the right types, I used them to
create a stock struct. I created some functions to get values from these structs, 
and to compute some values like total dollar amount, and percent change. I also had 
to make a new print function specifically for stock objects, which I then passed 
into the traverse functions I made in part A. The three main menu options are 
1.) printing stocks with closing prices greater than a user- specified amount, 
2.) printing stocks with percent change greater than a user- specified amount, and 
3.) printing out all stock information. I accomplished the first two by traversing 
the list of stocks, and calling the print function on them only if they met the 
user’s requirements. I accomplished the third by simply calling my forward traversal 
function in part A. Everything seems to be working fine aside from the float error 
when parsing values in.