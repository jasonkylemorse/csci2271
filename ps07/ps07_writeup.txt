I began this assignment by reading through the provided myallocinit() function 
and taking some time to grasp the idea of using extra space for headers, padding, 
and the sentinel block. Once this all made sense to me, I worked on the nextBlock() 
function and learned how to reach into the header (pointer – 1) to access the size 
of the block.
I moved on from here to figure out the allocateBlock() and unallocateBlock() 
functions. I knew that the least significant bit stored in the header was reserved 
for allocation purposes, so I needed a way to change this bit to a 1 or 0; I 
realized this was as simple as adding or subtracting 1. No masking was required 
here.
However, once I made my markBlock() and unmarkBlock() functions, I did need masking 
to toggle the bit because it was the second to last one. I was able to use bitwise 
operations AND and OR with a mask of 2 to accomplish this.
To make the mymalloc() function, I iterated through the heap headers until I found
an unallocated space that was big enough for the size request (or until I reached 
the sentinel block, in which case the function returned NULL). At first, I was having
a lot of trouble inserting a block into a space that was exactly big enough to fit
it. After some experimenting, I realized that this was happening because the system
saw a block of size 0 between the newly inserted block and the next block in the 
list. To fix this issue, I made a separate if-statement for this condition that only 
allocated the block and didn’t mess with any pointers. This resolved the issue. The 
free() function simply sets a block to unallocated.
I worked on coalesce() after these were all working. This iterated through the heap, 
checking if the current block and next block were both unallocated. If so, they 
were merged together into one.
Finally, I worked on mark(), sweep(), and mygc(). I began by checking if an item was
a pointer by seeing if it was equal to an address that exists between the beginning 
of the heap and the end of the heap. (As was noted in the documentation, this is 
very inefficient, but it works.) A block will only be marked if it is currently unmarked,
allocated, and being pointed to by a root. The sweep function iterates through the 
heap and frees any blocks that are allocated and unmarked. If a block is marked, it 
will be unmarked on this sweep. These two functions were called within the provided 
mygc() function, and then I tested and debugged everything.
I compiled my code with the test files and compared all of the results to the provided
executable files. Everything appears to be working exactly as expected, except for 
one bug in test5. For some reason, the last call to mygc() does not properly clear the
heap into one, large free block. I have not been able to pinpoint the cause of this
issue because mygc() works correctly everywhere else.